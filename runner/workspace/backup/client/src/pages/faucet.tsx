import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { useWallet } from "@/hooks/use-wallet";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Wallet, Shield, Coins, Info, Copy, ExternalLink, Clock, CheckCircle } from "lucide-react";

interface PassportData {
  score: number;
  address: string;
  last_score_timestamp: string;
  passing_score: boolean;
  threshold: string;
  stamp_scores: Record<string, string>;
}

interface RateLimitData {
  isRateLimited: boolean;
  nextClaimTime: number | null;
  remainingTime: number;
}

interface ClaimResponse {
  success: boolean;
  txHash: string;
  amount: string;
  blockNumber: number;
  gasUsed: string;
}

function formatTimeRemaining(ms: number): string {
  const days = Math.floor(ms / (1000 * 60 * 60 * 24));
  const hours = Math.floor((ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
  
  if (days > 0) {
    return `${days} days, ${hours} hours`;
  } else if (hours > 0) {
    return `${hours} hours, ${minutes} minutes`;
  } else {
    return `${minutes} minutes`;
  }
}

export default function Faucet() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { account, connect, isConnecting, switchToBaseSepolia } = useWallet();
  const [lastTxHash, setLastTxHash] = useState<string | null>(null);

  // Fetch Gitcoin Passport score
  const { data: passportData, isLoading: passportLoading, error: passportError } = useQuery<PassportData>({
    queryKey: ["/api/passport", account],
    enabled: !!account,
    retry: false,
  });

  // Check rate limiting
  const { data: rateLimitData, refetch: refetchRateLimit } = useQuery<RateLimitData>({
    queryKey: ["/api/rate-limit", account],
    enabled: !!account,
    refetchInterval: 30000, // Refetch every 30 seconds to update countdown
  });

  // Claim tokens mutation
  const claimMutation = useMutation({
    mutationFn: async () => {
      if (!account || !passportData) {
        throw new Error("No wallet connected or passport data");
      }
      
      const response = await apiRequest("POST", "/api/claim", {
        walletAddress: account,
        amount: "0.001",
        txHash: "", // Will be generated by backend
        passportScore: passportData.score.toString(),
      });
      
      return response.json() as Promise<ClaimResponse>;
    },
    onSuccess: (data) => {
      setLastTxHash(data.txHash);
      toast({
        title: "Transaction Successful!",
        description: `0.001 ETH has been sent to your wallet. TX: ${data.txHash.slice(0, 10)}...`,
      });
      queryClient.invalidateQueries({ queryKey: ["/api/rate-limit", account] });
    },
    onError: (error: any) => {
      toast({
        title: "Transaction Failed",
        description: error.message || "An error occurred while processing your claim",
        variant: "destructive",
      });
    },
  });

  const handleConnect = async () => {
    try {
      await connect();
      await switchToBaseSepolia();
    } catch (error: any) {
      toast({
        title: "Connection Failed",
        description: error.message || "Failed to connect wallet",
        variant: "destructive",
      });
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied!",
      description: "Address copied to clipboard",
    });
  };

  const openTransaction = (hash: string) => {
    window.open(`https://sepolia.basescan.org/tx/${hash}`, "_blank");
  };

  const isEligible = passportData && passportData.score >= 10;
  const canClaim = account && isEligible && !rateLimitData?.isRateLimited && !claimMutation.isPending;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <Coins className="text-white text-lg" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Base Sepolia Faucet</h1>
                <p className="text-sm text-gray-600">Get test ETH for development</p>
              </div>
            </div>
            <div className="hidden sm:flex items-center space-x-2 bg-emerald-50 px-3 py-2 rounded-lg">
              <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium text-emerald-700">Base Sepolia</span>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 py-8 space-y-6">
        {/* Wallet Connection */}
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-900 flex items-center">
                <Wallet className="text-blue-500 mr-2" />
                Wallet Connection
              </h2>
              {account && (
                <Badge variant="secondary" className="bg-emerald-100 text-emerald-800">
                  <div className="w-1.5 h-1.5 bg-emerald-400 rounded-full mr-1.5"></div>
                  Connected
                </Badge>
              )}
            </div>

            {!account ? (
              <div>
                <Button 
                  onClick={handleConnect} 
                  disabled={isConnecting}
                  className="w-full bg-blue-500 hover:bg-blue-600"
                >
                  <Wallet className="mr-2 h-4 w-4" />
                  {isConnecting ? "Connecting..." : "Connect MetaMask Wallet"}
                </Button>
                <p className="text-sm text-gray-500 mt-2 text-center">
                  Connect your wallet to check eligibility and claim test ETH
                </p>
              </div>
            ) : (
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-gray-700">Wallet Address</span>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => copyToClipboard(account)}
                    className="text-blue-500 hover:text-blue-600"
                  >
                    <Copy className="mr-1 h-3 w-3" />
                    Copy
                  </Button>
                </div>
                <p className="font-mono text-sm text-gray-900 break-all">{account}</p>
                
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <span className="text-sm font-medium text-gray-700">Network</span>
                  <p className="text-sm text-gray-900">Base Sepolia Testnet</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Gitcoin Passport */}
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-900 flex items-center">
                <Shield className="text-emerald-500 mr-2" />
                Gitcoin Passport Score
              </h2>
            </div>

            {!account ? (
              <div className="text-center py-8">
                <Shield className="text-gray-400 text-3xl mx-auto mb-3" />
                <p className="text-gray-500">Connect your wallet to check Gitcoin Passport score</p>
              </div>
            ) : passportLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <span className="ml-3 text-gray-600">Fetching Gitcoin Passport score...</span>
              </div>
            ) : passportError ? (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-center">
                  <Shield className="text-yellow-600 mr-2" />
                  <div>
                    <h3 className="text-yellow-800 font-medium">No Gitcoin Passport Found</h3>
                    <p className="text-yellow-700 text-sm mt-1">
                      Create your Gitcoin Passport at <a href="https://passport.gitcoin.co" target="_blank" rel="noopener noreferrer" className="underline text-blue-600">passport.gitcoin.co</a> and add stamps to get a score ≥ 10
                    </p>
                  </div>
                </div>
              </div>
            ) : passportData ? (
              <div className="bg-gradient-to-r from-emerald-50 to-blue-50 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="flex items-center space-x-2">
                      <span className="text-3xl font-bold text-gray-900">{passportData.score.toFixed(1)}</span>
                      <Badge className={isEligible ? "bg-emerald-100 text-emerald-800" : "bg-red-100 text-red-800"}>
                        {isEligible ? "Eligible ✓" : "Not Eligible"}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600 mt-1">
                      Minimum required: <span className="font-medium">10.0</span>
                    </p>
                  </div>
                  <div className="text-right">
                    <div className={`w-16 h-16 rounded-full flex items-center justify-center ${isEligible ? "bg-emerald-100" : "bg-red-100"}`}>
                      <CheckCircle className={`text-xl ${isEligible ? "text-emerald-600" : "text-red-600"}`} />
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </CardContent>
        </Card>

        {/* Faucet Claim */}
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-900 flex items-center">
                <Coins className="text-amber-500 mr-2" />
                Claim Test ETH
              </h2>
              <div className="text-sm text-gray-500">
                0.001 ETH per claim
              </div>
            </div>

            {!account || !isEligible ? (
              <div>
                <Button disabled className="w-full bg-gray-300 text-gray-500 cursor-not-allowed">
                  <Wallet className="mr-2 h-4 w-4" />
                  Connect wallet and verify Passport score
                </Button>
                <p className="text-sm text-gray-500 mt-2 text-center">
                  Requires Gitcoin Passport score ≥ 10 and wallet connection
                </p>
              </div>
            ) : rateLimitData?.isRateLimited ? (
              <div>
                <Button disabled className="w-full bg-amber-300 text-amber-800 cursor-not-allowed">
                  <Clock className="mr-2 h-4 w-4" />
                  Rate limit active
                </Button>
                <p className="text-sm text-amber-600 mt-2 text-center">
                  You can claim again in <span className="font-medium">{formatTimeRemaining(rateLimitData.remainingTime)}</span>
                </p>
              </div>
            ) : claimMutation.isPending ? (
              <div>
                <Button disabled className="w-full bg-blue-500 text-white cursor-not-allowed">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Processing claim...
                </Button>
                <p className="text-sm text-blue-600 mt-2 text-center">
                  Please wait while we process your transaction
                </p>
              </div>
            ) : (
              <div>
                <Button 
                  onClick={() => claimMutation.mutate()}
                  className="w-full bg-emerald-500 hover:bg-emerald-600"
                >
                  <Coins className="mr-2 h-4 w-4" />
                  Claim 0.001 ETH
                </Button>
                <div className="flex items-center justify-between mt-2 text-sm text-gray-500">
                  <span>Rate limit: 1 per week</span>
                  <span>Network: Base Sepolia</span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Transaction Status */}
        {lastTxHash && (
          <Card>
            <CardContent className="p-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="text-emerald-600 text-2xl" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Transaction Successful!</h3>
                <p className="text-gray-600 mb-4">0.001 ETH has been sent to your wallet</p>
                
                <div className="bg-gray-50 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-700">Transaction Hash</span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => openTransaction(lastTxHash)}
                      className="text-blue-500 hover:text-blue-600"
                    >
                      <ExternalLink className="mr-1 h-3 w-3" />
                      View on Explorer
                    </Button>
                  </div>
                  <p className="font-mono text-sm text-gray-900 break-all">{lastTxHash}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Faucet Info */}
        <Card>
          <CardContent className="p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Info className="text-blue-500 mr-2" />
              How it works
            </h2>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-medium text-gray-900 mb-3">Requirements</h3>
                <ul className="space-y-2 text-sm text-gray-600">
                  <li className="flex items-center">
                    <CheckCircle className="text-emerald-500 mr-2 h-4 w-4" />
                    MetaMask wallet connected
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-emerald-500 mr-2 h-4 w-4" />
                    Gitcoin Passport score ≥ 10
                  </li>
                  <li className="flex items-center">
                    <CheckCircle className="text-emerald-500 mr-2 h-4 w-4" />
                    Base Sepolia testnet network
                  </li>
                  <li className="flex items-center">
                    <Clock className="text-amber-500 mr-2 h-4 w-4" />
                    7-day cooldown between claims
                  </li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium text-gray-900 mb-3">Faucet Details</h3>
                <ul className="space-y-2 text-sm text-gray-600">
                  <li className="flex items-center justify-between">
                    <span>Amount per claim:</span>
                    <span className="font-medium">0.001 ETH</span>
                  </li>
                  <li className="flex items-center justify-between">
                    <span>Rate limit:</span>
                    <span className="font-medium">7 days</span>
                  </li>
                  <li className="flex items-center justify-between">
                    <span>Network:</span>
                    <span className="font-medium">Base Sepolia</span>
                  </li>
                  <li className="flex items-center justify-between">
                    <span>Status:</span>
                    <span className="text-emerald-600 font-medium">Active</span>
                  </li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-12">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <div className="flex items-center space-x-4">
              <span>© 2024 Base Sepolia Faucet</span>
              <span>•</span>
              <a href="#" className="hover:text-gray-900">Privacy</a>
              <span>•</span>
              <a href="#" className="hover:text-gray-900">Terms</a>
            </div>
            <div className="flex items-center space-x-2">
              <span>Powered by</span>
              <Coins className="text-blue-500 h-4 w-4" />
              <span className="font-medium">Ethereum</span>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
